{"version":3,"sources":["Components/util.js","Constants/constants.js","Components/ChartComponents/BarChart.js","Components/ChartsMain.js","Components/ChartComponents/LineChart.js","Components/ChartComponents/AreaChart.js","Components/GenericChartGenerator.js","Components/ChartSelector.js","Components/styles/AppStyles.js","App.js","reportWebVitals.js","index.js"],"names":["generateFields","axis","item","Data","logEntries","logentry","Object","keys","filter","key","getddmmmDate","dstring","d","Date","day","getDate","monthName","getMonth","plotTypes","dataTypes","date","string","number","chartData","xAxisFields","yAxisFields","tipStyle","display","fontWeight","color","background","alignItems","padding","BarChart","props","data","yFieldType","xFieldType","width","BarSeries","HorizontalBarSeries","VerticalBarSeries","style","margin","overflow","maxWidth","xType","stackBy","height","left","bottom","tickLabelAngle","tickFormat","tick","length","slice","tickPadding","cluster","Chart","LineChart","useState","lastDrawLocation","setlastDrawLocation","animation","xDomain","right","yDomain","top","onBrushEnd","area","onDrag","AreaChart","GenericChartGenerator","xField","yField","plotType","fields","map","value","val","isNaN","parse","getFieldTypes","chartProps","params","xFieldModifier","yFieldModifier","intermediateData","reduce","accum","x","y","extractData","undefined","ChartSelector","chartParams","widthHandler","inputHandler","chartTypeHandler","className","id","defaultChecked","onChange","e","target","onClick","styles","container","justifyContent","App","selectParams","setSelectParams","setwidth","textDecoration","marginRight","type","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3b1b494.chunk.js","sourcesContent":["import { dataTypes } from \"../Constants/constants\";\nimport Data from \"../Data/secude.json\";\n\nexport const extractData = (params) => {\n  const { xField, yField, data, xFieldModifier, yFieldModifier } = params;\n  if (\n    typeof data[0][xField] !== \"number\" &&\n    typeof data[0][yField] !== \"number\"\n  ) {\n    return null;\n  }\n  const intermediateData = data.reduce((accum, item) => {\n    const key = xFieldModifier ? xFieldModifier(item[xField]) : item[xField];\n    const val = yFieldModifier ? yFieldModifier(item[yField]) : item[yField];\n    if (accum[key]) {\n      accum[key] += val;\n    } else {\n      accum[key] = val;\n    }\n    return accum;\n  }, {});\n  const sanitisedData = Object.keys(intermediateData).map((key) => {\n    return { x: key, y: intermediateData[key] };\n  });\n  return sanitisedData;\n};\n\nexport const getFieldTypes = (data, fields) => {\n  return fields.map((value) => {\n    const val = data[0][value];\n    const type = typeof val;\n    switch (type) {\n      case \"string\": {\n        const isDate = !isNaN(Date.parse(val));\n        if (isDate) {\n          return dataTypes.date;\n        } else {\n          return dataTypes.string;\n        }\n      }\n      default:\n        return dataTypes.number;\n    }\n  });\n};\n\nexport const generateFields = (axis) => {\n  const item = Data.logEntries.logentry[0]\n  if (axis) {\n    return Object.keys(item).filter(key => {\n      return typeof item[key] === 'string'\n    })\n  } else {\n    return Object.keys(item).filter(key => {\n      return typeof item[key] === 'number'\n    })\n  }\n}\n\nfunction getRandomColor() {\n  var letters = \"0123456789ABCDEF\";\n  var color = \"#\";\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nexport const processData = (rawData, key, chartparam) => {\n  let userData = {};\n  rawData.map((info, i) => {\n    let param = key ? info[key][chartparam] : info[chartparam];\n    if (userData[param]) {\n      userData[param].push(info);\n    } else userData[param] = [info];\n    return null;\n  });\n  return userData;\n};\n\nexport const processData1 = (rawData, xkey, xparam, ykey, yparam) => {\n  let userData = {};\n  rawData.map((info, i) => {\n    let param = xkey ? info[xkey][xparam] : info[xparam];\n    if (xparam === \"date_utc\") {\n      param = getddmmmDate(info.date_utc);\n      // let dayOfWeek = new Date(info.date_utc).getDay()\n      // param = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayOfWeek]\n    }\n    const getYdata = () => {\n      if (ykey) {\n        if (yparam) {\n          return info[ykey][yparam];\n        } else {\n          return info[ykey];\n        }\n      } else {\n        return info;\n      }\n    };\n\n    if (userData[param]) {\n      userData[param].push(getYdata());\n    } else {\n      userData[param] = [getYdata()];\n    }\n    return null;\n  });\n\n  return userData;\n};\n\nexport const processChartData = (indexedData, setChartData, param) => {\n  let cData = [];\n  Object.keys(indexedData).map((id) => {\n    let obj = {};\n    obj.name = id;\n    obj.bigness =\n      param === \"fileSizeDwn\"\n        ? sumOfData(indexedData[id]) / 1000\n        : indexedData[id].length;\n    obj.clr = getRandomColor();\n    cData.push(obj);\n    return null;\n  });\n  if (setChartData) {\n    setChartData({ children: cData });\n  } else {\n    return { children: cData };\n  }\n};\n\nexport const getBarchartData = (cData) => {\n  cData.children.map((rec) => {\n    rec.x = rec.name;\n    rec.y = rec.bigness;\n  });\n  return cData.children;\n};\n\nexport const removeDuplicates = (data) => {\n  let obj = {};\n  Object.keys(data).map((key) => {\n    obj[key] = [...new Set(data[key])];\n  });\n  return obj;\n};\n\nexport const sumOfData = (data) => {\n  // let obj = {};\n  // Object.keys(data).map(key=>{\n  //     obj[key] = Math.round((data[key].reduce((a, b) => a + b, 0))/1000 , 2)\n  // })\n  return Math.round(data.reduce((a, b) => a + b, 0) / 1000, 2);\n  // return obj\n};\n\nexport const parseType = (data, param) => {\n  return data;\n};\n\nexport const chartParams = {\n  date: [null, \"date_utc\"],\n  filesize: [\"file\", \"fileSizeDwn\"],\n  users: [\"contextInfo\", \"username\"],\n  tcode: [\"contextInfo\", \"tcode\"],\n  logentries: [null, null],\n};\n\nexport const getddmmmDate = (dstring) => {\n  let monthNames = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n  let d = new Date(dstring);\n  let day = d.getDate();\n\n  let monthIndex = d.getMonth();\n  let monthName = monthNames[monthIndex];\n\n  return `${day}-${monthName}`;\n};\n\nexport const getChildData = (data, params, value) => {\n  return data.filter((item) => {\n    if (params[0]) {\n      if (params[1]) {\n        return item[params[0]][params[1]] === value;\n      } else {\n        return item[params[1]] === value;\n      }\n    } else {\n      return false;\n    }\n  });\n};\n","import { generateFields } from \"../Components/util\";\n\nconst plotInitialState = {\n  plotType: \"barChart\",\n  data: null,\n};\n\nconst plotTypes = {\n  barChart: \"Bar Chart\",\n  lineChart: 'Line Chart',\n  areaChart: 'Area Chart'\n};\n\nconst dataTypes = {\n    date: 'Date',\n    string: 'string',\n    number: 'number'\n}\n\nconst chartData = {\n  [plotTypes.barChart]: {\n    xAxisFields: generateFields(1),\n    yAxisFields : generateFields(0)\n  },\n  [plotTypes.lineChart]: {\n    xAxisFields: generateFields(1),\n    yAxisFields : generateFields(0)\n  },\n  [plotTypes.areaChart]: {\n    xAxisFields: generateFields(0),\n    yAxisFields : generateFields(0)\n  },\n}\n\n\nexport { plotInitialState, plotTypes, dataTypes, chartData };\n","import React from \"react\";\n\nimport {\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n  VerticalBarSeries,\n  HorizontalBarSeries,\n  FlexibleWidthXYPlot,\n} from \"react-vis\";\nimport { dataTypes } from \"../../Constants/constants\";\n\n\nconst tipStyle = {\n  display: \"flex\",\n  fontWeight: \"bold\",\n  color: \"#fff\",\n  background: \"#000\",\n  alignItems: \"center\",\n  padding: \"5px\",\n};\n\nfunction BarChart(props) {\n  const { data, yFieldType, xFieldType, width } = props;\n  const horizontal =\n    yFieldType === dataTypes.number && xFieldType === dataTypes.number;\n  const BarSeries = horizontal ? HorizontalBarSeries : VerticalBarSeries;\n\n  return (\n    <div style={{ margin: \"30px\", overflow: 'scroll' , maxWidth: '90%'}}>\n      <FlexibleWidthXYPlot\n        xType='ordinal'\n        stackBy=\"y\"\n        style={{ overflow: 'scroll'}}\n        width={width}\n        height={400}\n        margin={{ left: 120, bottom: 100 }}\n      >\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        <XAxis\n          tickLabelAngle={315}\n          style={tipStyle}\n          tickFormat={(tick) => {\n            return tick.length > 12 ? `${tick.slice(0, 12)}...` : tick\n          }}\n        />\n        <YAxis tickPadding={5} style={tipStyle} />\n        <BarSeries cluster=\"2016\" color=\"#79C7E3\" data={data} />\n      </FlexibleWidthXYPlot>\n    </div>\n  );\n}\n\nexport default BarChart;\n","import React, { useEffect, useState } from \"react\";\nimport \"../../node_modules/react-vis/dist/style.css\";\n\nimport fulldata from \"../Data/data\";\nimport BarChart from \"./ChartComponents/BarChart\";\nimport SunBurstChart from \"./SunBurst\";\nimport {\n  processChartData,\n  processData1,\n  chartParams,\n  parseType,\n  getChildData,\n} from \"./util\";\n\nfunction Chart(props) {\n  const [hoveredCell, setHoveredCell] = useState(false);\n  const [userData, setUserData] = useState(null);\n  const [prevData, setPrevData] = useState(null);\n  const [chartData, setChartData] = useState(null);\n  const [selectedEle, setSelected] = useState(null);\n  const [chartType, selectChartType] = useState(props.type);\n  const [minVal, setMinVal] = useState(1);\n  const [filterText, setFilterTextSelected] = useState(\"\");\n\n  const [xaxis, setAxisX] = useState(null);\n  const [yaxis, setAxisY] = useState([]);\n\n  useEffect(() => {\n    if (xaxis) {\n      let processedData = processData1(\n        fulldata,\n        xaxis[0],\n        xaxis[1],\n        yaxis[0],\n        yaxis[1]\n      );\n      setUserData(processedData);\n      processChartData(processedData, setChartData, yaxis[1]);\n      processForSelectedRecs(processedData);\n    }\n    setMinVal(1);\n  }, [xaxis, yaxis]);\n\n  const processForSelectedRecs = (recs) => {\n    let allData = { ...recs };\n    Object.keys(recs).forEach((key) => (allData[key] = true));\n    setSelected(allData);\n  };\n\n  const onCellSelect = (v) => {\n    if (!v.parent && prevData) {\n      setUserData(prevData);\n      processChartData(prevData, setChartData, yaxis[1]);\n      processForSelectedRecs(prevData);\n      setPrevData(null);\n    } else if ((v.parent && !prevData) || chartType === \"barchart\") {\n      let childData = getChildData(fulldata, xaxis, v.name);\n      let processedData = processData1(\n        childData,\n        null,\n        \"date_utc\",\n        \"file\",\n        \"fileSizeDwn\"\n      );\n      setUserData(processedData);\n      processChartData(processedData, setChartData, yaxis[1]);\n      processForSelectedRecs(processedData);\n      setPrevData(userData);\n    }\n  };\n\n  const toggleCheckbox = (ele, isChecked) => {\n    let allData = { ...selectedEle };\n    allData[ele] = isChecked;\n\n    setSelected(allData);\n    let fdata = {};\n    Object.keys(userData).map((key) => {\n      if (allData[key]) {\n        fdata[key] = userData[key];\n      }\n      return null;\n    });\n    processChartData(fdata, setChartData, yaxis[1]);\n  };\n\n  const filterData = (val) => {\n    let fdata = {};\n    Object.keys(userData).map((key) => {\n      if (userData[key].length > val) {\n        fdata[key] = userData[key];\n      }\n      return null;\n    });\n    processChartData(fdata, setChartData, yaxis[1]);\n    processForSelectedRecs(fdata);\n    setMinVal(val);\n  };\n\n  const styles = {\n    container: {\n      width: \"90%\",\n      margin: \"30px 0px\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      padding: \"20px\",\n      border: \"1px solid lightgrey\",\n      background: \"beige\",\n      borderRadius: \"10px\",\n    },\n  };\n\n  return (\n    <div className=\"App\" style={styles.container}>\n      <div>\n        <div className=\"d-flex\">\n          <div className=\"input-group m-3\">\n            <span className=\"input-group-text\" id=\"basic-addon1\">\n              X-Axis\n            </span>\n            <select\n              className=\"custom-select\"\n              onChange={(e) => setAxisX(chartParams[e.target.value])}\n            >\n              <option selected>Open this select menu</option>\n              {Object.keys(chartParams).map((val) => (\n                <option value={val}>{val}</option>\n              ))}\n            </select>\n          </div>\n          <div className=\"input-group m-3\">\n            <span className=\"input-group-text\" id=\"basic-addon1\">\n              Y-Axis\n            </span>\n            <select\n              className=\"custom-select\"\n              onChange={(e) => setAxisY(chartParams[e.target.value])}\n            >\n              <option selected>Open this select menu</option>\n              {Object.keys(chartParams).map((val) => (\n                <option value={val}>{val}</option>\n              ))}\n            </select>\n          </div>\n          <div className=\"input-group m-3\">\n            <span className=\"input-group-text\" id=\"basic-addon1\">\n              Chart Type\n            </span>\n            <select\n              className=\"custom-select\"\n              value={chartType}\n              onChange={(e) => selectChartType(e.target.value)}\n            >\n              <option value=\"sunburst\">Sunburst</option>\n              <option value=\"barchart\">Barchart</option>\n            </select>\n          </div>\n        </div>\n      </div>\n      {/* <div className=\"col-10 row\"> */}\n        {/* {\n          xaxis && <p>{xaxis[1]} vs {yaxis ? <>{yaxis[1]}</> : <>\"log entries\"</>}</p>\n        } */}\n        {/* <div\n          className=\"col-lg-8 d-flex border border-end-0 border-secondary\"\n          style={{ alignItems: \"center\", justifyContent: \"center\" }}\n        >\n          {chartData && chartType === \"sunburst\" && (\n            <SunBurstChart\n              data={parseType(chartData, yaxis[1])}\n              xaxis={xaxis}\n              yaxis={yaxis}\n              setHoveredCell={(v) => setHoveredCell(v)}\n              onCellSelect={(v) => onCellSelect(v)}\n              hoveredCell={hoveredCell}\n            />\n          )}\n          {chartData && chartType === \"barchart\" && (\n            <BarChart\n              data={parseType(chartData, yaxis[1])}\n              onDataSelect={(arg) => onCellSelect(arg)}\n              setHoveredCell={(v) => setHoveredCell(v)}\n              hoveredCell={hoveredCell}\n              hideDataCell={(cell) => {\n                toggleCheckbox(cell, false);\n              }}\n            />\n          )}\n        </div>\n        <div className=\"col-4 border border-secondary\">\n          {xaxis && (\n            <div className=\"input-group m-3\">\n              <span className=\"input-group-text\" id=\"basic-addon1\">\n                Min Value\n              </span>\n              <input\n                type=\"number\"\n                min=\"1\"\n                max=\"100\"\n                value={minVal}\n                className=\"form-control col-6\"\n                id=\"myRange\"\n                onChange={(e) => filterData(e.target.value)}\n              ></input>\n            </div>\n          )}\n          {xaxis && (\n            <div className=\"accordion col-12\" id=\"accordionExample\">\n              <div className=\"card\">\n                <div className=\"card-header\" id=\"headingOne\">\n                  <p\n                    className=\"text-left m-0\"\n                    data-toggle=\"collapse\"\n                    data-target=\"#collapseOne\"\n                    aria-expanded=\"true\"\n                    aria-controls=\"collapseOne\"\n                  >\n                    Data Records Selected\n                    <i className=\"bi bi-chevron-down mx-2\"></i>\n                  </p>\n                </div>\n\n                <div\n                  id=\"collapseOne\"\n                  className=\"collapse show\"\n                  aria-labelledby=\"headingOne\"\n                  data-parent=\"#accordionExample\"\n                >\n                  <div\n                    className=\"card-body\"\n                    style={{\n                      maxHeight: \"30vh\",\n                      overflow: \"auto\",\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                    }}\n                  >\n                    <input\n                      type=\"text\"\n                      vclassName=\"custom-select mb-3\"\n                      placeholder=\"enter text to filter\"\n                      onChange={(e) => setFilterTextSelected(e.target.value)}\n                    ></input>\n                    {selectedEle &&\n                      Object.keys(selectedEle).map((user) => {\n                        if (\n                          !filterText ||\n                          (filterText &&\n                            user.toLocaleLowerCase().includes(filterText))\n                        ) {\n                          return (\n                            <label style={{ textAlign: \"left\" }}>\n                              <input\n                                type=\"checkbox\"\n                                defaultChecked={selectedEle[user]}\n                                onChange={(e) =>\n                                  toggleCheckbox(user, e.target.checked)\n                                }\n                              />\n                              {\" \" + user}\n                            </label>\n                          );\n                        }\n                      })}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div> */}\n      {/* </div> */}\n    </div>\n  );\n}\n\nexport default Chart;\n","import React, { useState } from \"react\";\n\nimport {\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n  LineMarkSeries,\n  XYPlot,\n  Highlight,\n} from \"react-vis\";\n\nconst tipStyle = {\n  display: \"flex\",\n  fontWeight: \"bold\",\n  color: \"#fff\",\n  background: \"#000\",\n  alignItems: \"center\",\n  padding: \"5px\",\n};\n\nfunction LineChart(props) {\n  const { data, width } = props;\n  const [lastDrawLocation, setlastDrawLocation] = useState(null);\n\n  return (\n    <div style={{ margin: \"30px\", overflow: \"scroll\", maxWidth: \"90%\" }}>\n      <XYPlot\n        animation\n        xDomain={\n          lastDrawLocation && [lastDrawLocation.left, lastDrawLocation.right]\n        }\n        yDomain={\n          lastDrawLocation && [lastDrawLocation.bottom, lastDrawLocation.top]\n        }\n        xType=\"ordinal\"\n        stackBy=\"y\"\n        width={width}\n        height={400}\n        margin={{ left: 120, bottom: 100 }}\n      >\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        <XAxis\n          tickLabelAngle={315}\n          style={tipStyle}\n          tickFormat={(tick) => {\n            return tick.length > 8 ? `${tick.slice(0, 8)}...` : tick\n          }}\n        />\n        <YAxis tickPadding={5} style={tipStyle} />\n        <LineMarkSeries color=\"#79C7E3\" data={data} />\n        <Highlight\n          onBrushEnd={(area) => setlastDrawLocation({ lastDrawLocation: area })}\n          onDrag={(area) => {\n            setlastDrawLocation({\n              lastDrawLocation: {\n                bottom: lastDrawLocation.bottom + (area.top - area.bottom),\n                left: lastDrawLocation.left - (area.right - area.left),\n                right: lastDrawLocation.right - (area.right - area.left),\n                top: lastDrawLocation.top + (area.top - area.bottom),\n              },\n            });\n          }}\n        />\n      </XYPlot>\n    </div>\n  );\n}\n\nexport default LineChart;\n","import React from 'react'\nimport { AreaSeries, FlexibleWidthXYPlot, HorizontalGridLines, VerticalGridLines, XAxis, YAxis } from 'react-vis'\n\nconst tipStyle = {\n  display: \"flex\",\n  fontWeight: \"bold\",\n  color: \"#fff\",\n  background: \"#000\",\n  alignItems: \"center\",\n  padding: \"5px\",\n};\n\nexport const AreaChart = (props) => {\n  const { data, width } = props;\n  return (\n    <div style={{ margin: \"30px\", overflow: 'scroll' , maxWidth: '90%'}}>\n      <FlexibleWidthXYPlot\n        xType='ordinal'\n        stackBy=\"y\"\n        style={{ overflow: 'scroll'}}\n        width={width}\n        height={400}\n        margin={{ left: 120, bottom: 100 }}\n      >\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        <XAxis\n          tickLabelAngle={315}\n          style={tipStyle}\n          tickFormat={(tick) => {\n            return tick.length > 12 ? `${tick.slice(0, 12)}...` : tick\n          }}\n        />\n        <YAxis tickPadding={5} style={tipStyle} />\n        <AreaSeries\n        // curve=\"curveNatural\"\n        data={data}\n      />\n      </FlexibleWidthXYPlot>\n    </div>\n  )\n}\n","import React from \"react\";\n\nimport { dataTypes, plotTypes } from \"../Constants/constants\";\nimport BarChart from \"./ChartComponents/BarChart\";\nimport { extractData, getFieldTypes, getddmmmDate } from \"./util\";\nimport LineChart from \"./ChartComponents/LineChart\";\nimport { AreaChart } from \"./ChartComponents/AreaChart\";\n\n\nexport default function GenericChartGenerator(props) {\n  const { xField, yField, data, width, plotType } = props;\n  const [xFieldType, yFieldType] = getFieldTypes(data, [xField, yField]);\n  const plotData = extractData({\n    xField,\n    yField,\n    data,\n    xFieldModifier: xFieldType === dataTypes.date ? getddmmmDate : undefined,\n    yFieldModifier: yFieldType === dataTypes.date ? getddmmmDate : undefined,\n  });\n  const chartProps = {\n    data: plotData,\n    xFieldType,\n    yFieldType,\n    width,\n  };\n\n  switch (plotType) {\n    case plotTypes.barChart: {\n      return <BarChart {...chartProps} />;\n    }\n    case plotTypes.lineChart: {\n      return <LineChart {...chartProps} />\n    }\n    case plotTypes.areaChart: {\n      return <AreaChart {...chartProps} />\n    }\n    default: {\n      return <BarChart {...chartProps} />;\n    }\n  }\n}\n","import React from \"react\";\n\nexport const ChartSelector = (props) => {\n  const {\n    chartParams,\n    xField,\n    yField,\n    plotType,\n    chartData,\n    widthHandler,\n    inputHandler,\n    chartTypeHandler,\n  } = props;\n  return (\n    <div className=\"d-flex justify-content-between\">\n      <div className=\"input-group m-3\">\n        <span className=\"input-group-text\" id=\"basic-addon1\">\n          X-Axis\n        </span>\n        <select\n          className=\"custom-select\"\n          defaultChecked={xField}\n          onChange={(e) => inputHandler(1, e.target.value)}\n        >\n          {chartParams[plotType].xAxisFields.map((val) => (\n            <option value={val} key={val}>\n              {val}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"input-group m-3\">\n        <span className=\"input-group-text\" id=\"basic-addon1\">\n          Y-Axis\n        </span>\n        <select\n          className=\"custom-select\"\n          defaultChecked={yField}\n          onChange={(e) => inputHandler(0, e.target.value)}\n        >\n          {chartParams[plotType].yAxisFields.map((val) => (\n            <option value={val} key={val}>\n              {val}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"input-group m-3\">\n        <span className=\"input-group-text\" id=\"basic-addon1\">\n          Chart Type\n        </span>\n        <select\n          className=\"custom-select\"\n          defaultChecked={plotType}\n            onChange={(e) => chartTypeHandler(e.target.value)}\n        >\n          {Object.keys(chartParams).map((val) => (\n            <option value={val} key={val}>\n              {val}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"d-flex m-3\">\n        <button onClick={() => widthHandler(\"-\")}>-</button>\n        <span className=\"input-group-text flex-grow-1 mx-1\" id=\"basic-addon1\">\n          Zoom\n        </span>\n        <button onClick={() => widthHandler(\"+\")}>+</button>\n      </div>\n    </div>\n  );\n};\n","export const styles = {\n  container: {\n    margin: \"12px\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    height: \"80vh\",\n  },\n};\n","import React, { useState } from \"react\";\nimport \"bootstrap\";\nimport \"./App.css\";\nimport \"../node_modules/react-vis/dist/style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Chart from \"./Components/ChartsMain\";\nimport GenericChartGenerator from \"./Components/GenericChartGenerator\";\nimport Data from \"./Data/secude.json\";\nimport { ChartSelector } from \"./Components/ChartSelector\";\nimport { chartData, plotTypes } from \"./Constants/constants\";\nimport { styles } from \"./Components/styles/AppStyles\";\n\nfunction App() {\n  const [charts, addChart] = useState([]);\n  const [selectParams, setSelectParams] = useState({\n    chartParams: chartData,\n    xField: \"Date (IST)\",\n    yField: \"Download Filesize\",\n    plotType: plotTypes.barChart,\n  });\n\n  const initialWidth = 800;\n  const [width, setwidth] = useState(initialWidth);\n\n  const widthHandler = (type) => {\n    if (type === \"+\") {\n      setwidth((prev) => prev + 500);\n    } else {\n      setwidth((prev) => (prev > initialWidth ? prev - 100 : prev));\n    }\n  };\n  const paramsHandler = (axis, value) => {\n    if (axis) {\n      setSelectParams((prev) => ({\n        ...prev,\n        xField: value,\n      }));\n    } else {\n      setSelectParams((prev) => ({\n        ...prev,\n        yField: value,\n      }));\n    }\n    setwidth(initialWidth);\n  };\n  const chartTypeHandler = (type) => {\n    setSelectParams((prev) => ({\n      ...prev,\n      plotType: type,\n      xField: prev.chartParams[type].xAxisFields[0],\n      yField: prev.chartParams[type].yAxisFields[0],\n    }));\n  };\n  const addNewChart = () => {\n    let allCharts = [...charts];\n    allCharts.push(\n      <Chart\n        xkey=\"contextInfo\"\n        xparam=\"tcode\"\n        ykey=\"file\"\n        yparam=\"fileSizeDwn\"\n        type=\"sunburst\"\n      />\n    );\n    addChart(allCharts);\n  };\n  return (\n    <div className=\"App\">\n      <h3 style={{ margin: \"10px\" }}>Analytics Dashboard</h3>\n      <div className=\"card\" style={styles.container}>\n        <p style={{ margin: \"10px\", textDecoration: \"underline\" }}>\n          Selected fields\n        </p>\n        <div className=\"d-flex\">\n          <p style={{ marginRight: \"12px\" }}>\n            On X-axis : <b>{selectParams.xField}</b>\n          </p>\n          <p style={{ marginRight: \"12px\" }}>\n            On Y-axis : <b>{selectParams.yField}</b>\n          </p>\n          <p>\n            Selected chart type : <b>{selectParams.plotType}</b>\n          </p>\n        </div>\n\n        <ChartSelector\n          {...selectParams}\n          widthHandler={widthHandler}\n          inputHandler={paramsHandler}\n          chartTypeHandler={chartTypeHandler}\n        />\n        <GenericChartGenerator\n          xField={selectParams.xField}\n          yField={selectParams.yField}\n          plotType={selectParams.plotType}\n          width={width}\n          data={Data.logEntries.logentry}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}